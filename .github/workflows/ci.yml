name: CI

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flask in background
        run: |
          nohup python app.py > flask.log 2>&1 &
          sleep 5
          
      - name: Run tests
        run: |
          pip install pytest requests
          pytest -q

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }}             | docker login --username AWS --password-stdin               $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, tag and push Docker image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          ECR_REPO=${{ secrets.ECR_REPOSITORY || 'python-mid-project' }}
          ECR_URI=$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPO

          GIT_TAG=${GITHUB_SHA::7}
          docker build -t $ECR_REPO:$GIT_TAG -t $ECR_REPO:latest .
          docker tag $ECR_REPO:$GIT_TAG $ECR_URI:$GIT_TAG
          docker tag $ECR_REPO:latest   $ECR_URI:latest
          docker push $ECR_URI:$GIT_TAG
          docker push $ECR_URI:latest

          echo "IMAGE_URI=$ECR_URI:latest" >> $GITHUB_ENV

      - name: Render ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render
        with:
          task-definition: ecs-task-def.json
          container-name: python-mid-project
          image: ${{ env.IMAGE_URI }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: midproj-task-service-86m4y4m1
          cluster: midproj-cluster
          wait-for-service-stability: true
