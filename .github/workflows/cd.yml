name: CD

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: python-mid-project
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  build-test-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Check requirements.txt
        run: test -f requirements.txt

      - name: Install deps & run tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pytest -q

      - name: Docker login (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        run: |
          SHA=${{ github.sha }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
                       -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${SHA} .
          echo "IMAGE_TAG=${SHA}" >> $GITHUB_ENV

      - name: Push image (Docker Hub)
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retag & Push to ECR
        if: ${{ env.ECR_REPOSITORY != '' }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI=${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${ECR_URI}:${{ env.IMAGE_TAG }}
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${ECR_URI}:latest
          docker push ${ECR_URI}:${{ env.IMAGE_TAG }}
          docker push ${ECR_URI}:latest
          echo "ECR_IMAGE=${ECR_URI}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

      - name: Validate taskdef
        run: jq empty ecs/taskdef.json

      - name: Render taskdef
        run: |
          IMG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          if [ -n "${{ env.ECR_IMAGE }}" ]; then IMG="${{ env.ECR_IMAGE }}"; fi
          jq --arg IMG "$IMG" '.containerDefinitions[0].image=$IMG' ecs/taskdef.json > taskdef.out.json

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: taskdef.out.json
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
